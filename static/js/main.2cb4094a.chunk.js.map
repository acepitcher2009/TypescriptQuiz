{"version":3,"sources":["components/API.ts","components/Utils.ts","components/QuestionCard.styles.ts","components/QuestionCard.tsx","imgs/summer.jpg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGimage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cb4094a.chunk.js","sourcesContent":["import { shuffleArray } from './Utils';\n\nexport type Question = {\n    category: string;\n    correct_answer: string;\n    difficulty: string;\n    incorrect_answers: string[];\n    question: string;\n    type: string;\n}\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty{\n    EASY = \"easy\",\n    MEDIUM = \"medium\",\n    Hard = \"hard\"\n}\n\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n    const data = await (await fetch(endpoint)).json();\n    return data.results.map((question: Question) => ({\n        ...question,\n        answers: shuffleArray([...question.incorrect_answers, question.correct_answer])\n    }))\n}","export const shuffleArray = (array: any[]) => [...array].sort(() => Math.random() - 0.5);","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    max-width: 1100px;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 2px solid #0085a3;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    text-align: center;\n\n    p {\n        font-size: 1rem;\n    }\n\n`\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\nexport const ButtonWrapper = styled.div<ButtonWrapperProps> `\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 0.8rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({ correct, userClicked }) => \n    correct\n        ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n        : !correct && userClicked\n            ? 'linear-gradient(90deg, #ff5656, #c16868)'\n            : 'linear-gradient(90deg, #56ccff, #6eafb4)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n            \n    }\n`","import * as React from 'react';\nimport { AnswerObject } from '../App';\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\n\ntype Props = {\n    question: string;\n    answers: string[];\n    callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n    userAnswer: AnswerObject | undefined;\n    questionNr: number;\n    totalQuestions: number;\n}\n\nconst QuestionCard: React.FC<Props> = ({question, answers, callback, userAnswer, questionNr, totalQuestions}) => (\n    <Wrapper>\n        <p className=\"number\">Question: {questionNr} / {totalQuestions}</p>\n        <p dangerouslySetInnerHTML={{ __html: question }} />\n        <div>\n            {answers.map(answer => (\n                <ButtonWrapper key={answer} correct={userAnswer?.correctAnswer === answer} userClicked={userAnswer?.answer === answer}>\n                    <button disabled={!!userAnswer} value={answer} onClick={callback}>\n                        <span dangerouslySetInnerHTML={{ __html: answer }} />\n                    </button>\n                </ButtonWrapper>\n            ))}\n        </div>\n    </Wrapper>\n)\n\nexport default QuestionCard;","export default __webpack_public_path__ + \"static/media/summer.568d41c1.jpg\";","import styled, { createGlobalStyle } from 'styled-components';\nimport BGimage from './imgs/summer.jpg';\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%;\n    }\n\n    body {\n        background-image: url(${BGimage});\n        background-size: cover;\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Catamaran', sans-serif;\n    }\n\n`;\n\nexport const Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    > p {\n        color: #fff;\n    }\n\n    .score {\n        color: #fff;\n        font-size: 2rem;\n        margin: 0;\n    }\n\n    h1 {\n        font-family: Fascinate Inline, Haettenschweiler, 'Arial Narrow Bold', sans-serif;\n        background-image: linear-gradient(180deg, #fff, #87f1ff);\n        background-size: 100%;\n        background-clip: text;\n        -webkit-background-clip: text;\n        -webkit-text-fill-color: transparent;\n        -moz-background-clip: text;\n        -moz-text-fill-color: transparent;\n        filter: drop-shadow(2px 2px #0085a3);\n        font-size: 70px;\n        text-align: center;\n        margin: 20px;\n        font-weight: 700;\n    }\n\n    .start, .next {\n        cursor: pointer;\n        background: linear-gradient(180deg, #fff, #ffcc91);\n        border: 2px solid #d38558;\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n        border-radius: 10px;\n        height: 40px;\n        margin 20px 0;\n        padding 0 40px;\n        \n    }\n\n    .start {\n        max-width: 200px;\n    }\n`;","import React, { useState } from 'react';\nimport { fetchQuizQuestions } from './components/API';\nimport QuestionCard from './components/QuestionCard';\nimport { QuestionState, Difficulty } from './components/API';\nimport { GlobalStyle, Wrapper } from './App.styles';\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n\n  }\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      const answer = e.currentTarget.value;\n      const correct = questions[number].correct_answer === answer;\n      if (correct) setScore(prev => prev + 1);\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers(prev => [...prev, answerObject]);\n    }\n\n  }\n\n  const nextQuestion = () => {\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n\n  }\n\n  return (\n    <>\n      <GlobalStyle/>\n      <Wrapper>\n        <h1>React Quiz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (<button className=\"start\" onClick={startTrivia}>Start</button>) : null}\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <p>Loading Questions...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n           questionNr={number + 1}\n           totalQuestions={TOTAL_QUESTIONS}\n           question={questions[number].question}\n           answers={questions[number].answers}\n           userAnswer={userAnswers ? userAnswers[number] : undefined}\n           callback={checkAnswer}\n          />)}\n        {!gameOver && !loading && userAnswers.length === number + 1 && number !== TOTAL_QUESTIONS - 1 ? (<button className=\"next\" onClick={nextQuestion}>Next Question</button>) : null}\n        </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}